// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JetStreamAPI.Migrations
{
    [DbContext(typeof(JetStreamBackendConfiguration))]
    partial class JetStreamBackendConfigurationModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JetStreamAPI.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Arda"
                        },
                        new
                        {
                            Id = 2,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Satoru"
                        },
                        new
                        {
                            Id = 3,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Lukas"
                        },
                        new
                        {
                            Id = 5,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Daniel"
                        },
                        new
                        {
                            Id = 6,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Tobey"
                        },
                        new
                        {
                            Id = 7,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Micheal"
                        },
                        new
                        {
                            Id = 8,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Brian"
                        },
                        new
                        {
                            Id = 9,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Alim"
                        },
                        new
                        {
                            Id = 10,
                            FailedLoginAttempts = 0,
                            IsLocked = false,
                            Password = "1234",
                            Username = "Sven"
                        });
                });

            modelBuilder.Entity("JetStreamAPI.Models.ServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 34.95m,
                            Name = "Kleiner Service"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 59.95m,
                            Name = "Grosser Service"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 74.95m,
                            Name = "Rennski-Service"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 24.95m,
                            Name = "Bindung montieren und einstellen"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 14.95m,
                            Name = "Fell zuschneiden"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 19.95m,
                            Name = "Heisswachsen"
                        });
                });

            modelBuilder.Entity("JetStreamAPI.Models.ServiceOrder", b =>
                {
                    b.HasOne("ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });
#pragma warning restore 612, 618
        }
    }
}
